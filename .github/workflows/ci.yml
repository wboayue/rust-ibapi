name: ci

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [sync, async]
    name: Test ${{ matrix.feature }}

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Cache cargo registry, index, and build directories
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.feature }}-
            ${{ runner.os }}-cargo-

      - name: Build (${{ matrix.feature }})
        run: |
          if [ "${{ matrix.feature }}" = "sync" ]; then
            cargo build --verbose
          else
            cargo build --verbose --no-default-features --features async
          fi

      - name: Run tests (${{ matrix.feature }})
        run: |
          if [ "${{ matrix.feature }}" = "sync" ]; then
            cargo test --verbose
          else
            cargo test --verbose --no-default-features --features async
          fi

      - name: Build all examples (${{ matrix.feature }})
        run: |
          if [ "${{ matrix.feature }}" = "sync" ]; then
            cargo build --examples --verbose
          else
            cargo build --examples --verbose --no-default-features --features async
          fi

  # Run clippy on both feature sets
  clippy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [sync, async]
    name: Clippy ${{ matrix.feature }}

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-${{ matrix.feature }}-
            ${{ runner.os }}-cargo-clippy-

      - name: Run clippy (${{ matrix.feature }})
        run: |
          if [ "${{ matrix.feature }}" = "sync" ]; then
            cargo clippy --all-targets -- -D warnings
          else
            cargo clippy --all-targets --no-default-features --features async -- -D warnings
          fi

  # Format check (only needs to run once)
  fmt:
    runs-on: ubuntu-latest
    name: Format

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt -- --check

  # Documentation build for both features
  docs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [sync, async]
    name: Docs ${{ matrix.feature }}

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-docs-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-docs-${{ matrix.feature }}-
            ${{ runner.os }}-cargo-docs-

      - name: Build documentation (${{ matrix.feature }})
        run: |
          if [ "${{ matrix.feature }}" = "sync" ]; then
            cargo doc --no-deps
          else
            cargo doc --no-deps --no-default-features --features async
          fi
